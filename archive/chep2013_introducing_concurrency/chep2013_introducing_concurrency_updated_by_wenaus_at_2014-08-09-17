{"tags": ["cern", "chep2013", "concurrency", "software"], "refs": [{"description": "contact", "tagref": "benedikt_hegner", "created_at": "2014-08-09T14:07:18+00:00", "updated_at": "2014-08-09T14:07:18+00:00", "entity": "chep2013_introducing_concurrency", "subtype": null, "entityref": null, "textref_original": null, "textref": "Benedikt Hegner", "type": "contact", "id": 933}, {"description": "", "tagref": "", "created_at": "2014-08-09T14:07:18+00:00", "updated_at": "2014-08-09T14:07:18+00:00", "entity": "chep2013_introducing_concurrency", "subtype": null, "entityref": null, "textref_original": null, "textref": "https://indico.cern.ch/event/214784/contribution/203", "type": "web", "id": 952}], "refstothis": [], "othertags": ["software"], "uses": [], "user": "wenaus", "logo": "", "usedby": [], "loggedin": true, "mytags": ["chep2013_introducing_concurrency"], "ent": {"web": null, "mytag": "chep2013_introducing_concurrency", "description": "<p>In the past, the increasing demands for HEP processing resources could be fulfilled by distributing the work to more and more physical machines. Limitations in power consumption of both CPUs and entire data centers are bringing an end to this era of easy scalability. To get the most CPU performance per Watt, future hardware will be characterised by less and less memory per processor, as well as thinner, more specialized and more numerous cores per die, and rather heterogeneous resources. To fully exploit the potential of the many cores, HEP data processing frameworks need to allow for parallel execution of reconstruction or simulation algorithms on several events simultaneously. We describe our experience in introducing concurrency related capabilities into Gaudi, a generic data processing software framework, which is currently being used by several HEP experiments, including the ATLAS and LHCb experiments at the LHC. After a description of the concurrent framework and the most relevant design choices driving its development, we demonstrate its projected performance emulating data reconstruction workflows of the LHC experiments. As a second step, we describe the behaviour of the framework in a more realistic environment, using a subset of the real LHCb reconstruction workflow, and present our strategy and the used tools to validate the physics outcome of the parallel framework against the results of the present, purely sequential LHCb software. We then summarize the measurement of the code performance of the multithreaded application in terms of memory and CPU usage and I/O load.</p>", "created_at": "2014-08-09T14:07:18+00:00", "updated_at": "2014-08-09T14:07:18+00:00", "subtype": "", "location": "", "alltags": " cern  chep2013  chep2013_introducing_concurrency  concurrency  software ", "date": "2014-08-09T00:00:00+00:00", "description_markup": "In the past, the increasing demands for HEP processing resources could be fulfilled by distributing the work to more and more physical machines. Limitations in power consumption of both CPUs and entire data centers are bringing an end to this era of easy scalability. To get the most CPU performance per Watt, future hardware will be characterised by less and less memory per processor, as well as thinner, more specialized and more numerous cores per die, and rather heterogeneous resources. To fully exploit the potential of the many cores, HEP data processing frameworks need to allow for parallel execution of reconstruction or simulation algorithms on several events simultaneously. We describe our experience in introducing concurrency related capabilities into Gaudi, a generic data processing software framework, which is currently being used by several HEP experiments, including the ATLAS and LHCb experiments at the LHC. After a description of the concurrent framework and the most relevant design choices driving its development, we demonstrate its projected performance emulating data reconstruction workflows of the LHC experiments. As a second step, we describe the behaviour of the framework in a more realistic environment, using a subset of the real LHCb reconstruction workflow, and present our strategy and the used tools to validate the physics outcome of the parallel framework against the results of the present, purely sequential LHCb software. We then summarize the measurement of the code performance of the multithreaded application in terms of memory and CPU usage and I/O load.", "type": "presentation", "id": 578, "allmytags": " chep2013_introducing_concurrency ", "name": "Introducing Concurrency in the Gaudi Data Processing Framework"}, "tagname": "chep2013_introducing_concurrency", "image": {}}