{"tags": ["cern", "chep2013", "concurrency", "software"], "refs": [{"description": "contact", "tagref": "marco_clemencic", "created_at": "2014-08-10T13:15:19+00:00", "updated_at": "2014-08-10T13:15:19+00:00", "entity": "chep2013_preparing_concurrency", "subtype": null, "entityref": null, "textref_original": null, "textref": "Marco Clemencic", "type": "contact", "id": 2205}, {"description": "proceedings", "tagref": "", "created_at": "2014-08-10T13:15:19+00:00", "updated_at": "2014-08-10T13:15:19+00:00", "entity": "chep2013_preparing_concurrency", "subtype": null, "entityref": null, "textref_original": null, "textref": "https://concurrency.web.cern.ch/sites/concurrency.web.cern.ch/files/CHEP_2013_Preprint_1.pdf", "type": "web", "id": 1628}], "refstothis": [], "othertags": ["software"], "uses": [], "user": "wenaus", "logo": "", "usedby": [], "loggedin": true, "mytags": ["chep2013_preparing_concurrency"], "ent": {"web": null, "mytag": "chep2013_preparing_concurrency", "description": "<p>The necessity for really thread-safe experiment software has recently become very evident, largely driven by the evolution of CPU architectures towards exploiting increasing levels of parallelism, For high-energy physics this represents a real paradigm shift, as concurrent programming was previously only limited to special, well-defined domains like control software or software framework internals. This paradigm shift, however, falls into the middle of the successful LHC programme and many million lines of code have already been written without the need for parallel execution in mind. In this presentation we will have a closer look at the offline processing applications of the LHC experiments and their readiness for the many-core era. We will review how previous design choices impact the move to concurrent programming. We present our findings on transforming parts of the LHC experiments' reconstruction software to thread-safe code, and the main design patterns that have emerged during the process. A plethora of parallel-programming patterns are well known outside the HEP community, but only a few have turned out to be straight forward enough to be suited for non-expert physics programmers. Finally, we propose a potential strategy for the migration of existing HEP experiment software to the many-core era.</p>", "created_at": "2014-08-10T13:15:19+00:00", "updated_at": "2014-08-10T13:15:19+00:00", "subtype": "", "location": "", "alltags": " cern  chep2013  chep2013_preparing_concurrency  concurrency  software ", "date": "2014-08-10T00:00:00+00:00", "description_markup": "The necessity for really thread-safe experiment software has recently become very evident, largely driven by the evolution of CPU architectures towards exploiting increasing levels of parallelism, For high-energy physics this represents a real paradigm shift, as concurrent programming was previously only limited to special, well-defined domains like control software or software framework internals. This paradigm shift, however, falls into the middle of the successful LHC programme and many million lines of code have already been written without the need for parallel execution in mind. In this presentation we will have a closer look at the offline processing applications of the LHC experiments and their readiness for the many-core era. We will review how previous design choices impact the move to concurrent programming. We present our findings on transforming parts of the LHC experiments' reconstruction software to thread-safe code, and the main design patterns that have emerged during the process. A plethora of parallel-programming patterns are well known outside the HEP community, but only a few have turned out to be straight forward enough to be suited for non-expert physics programmers. Finally, we propose a potential strategy for the migration of existing HEP experiment software to the many-core era.", "type": "presentation", "id": 1444, "allmytags": " chep2013_preparing_concurrency ", "name": "Preparing HEP Software For Concurrency"}, "tagname": "chep2013_preparing_concurrency", "image": {}}